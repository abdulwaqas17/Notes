Zabardast! Chalo ab **Step 2️⃣: Server vs Client Components** ko detail mein explore karte hain, jaise tumne kaha:

---

## **2️⃣ Server vs Client Components – Deep Dive**

---

### ✅ **Definition:**

Next.js App Router mein har component **default** taur par **Server Component** hota hai. Agar kisi component ko explicitly **Client Component** banana ho to aapko `"use client"` directive use karna padta hai component ke top mein.

* **Server Component** = Backend pe render hota hai, client ko HTML send hoti hai.
* **Client Component** = Browser (client) mein render hota hai, JS execution hoti hai.

---

### 🎯 **Use Case:**

| Type                 | Use When...                                                        |
| -------------------- | ------------------------------------------------------------------ |
| **Server Component** | SEO chahiye ho, data fetch karna ho, fast loading chahiye ho       |
| **Client Component** | User interaction (buttons, form inputs), state handling, useEffect |

---

### 🏠 **Daily Life Example:**

* **Server Component**: Ek newspaper printing press article likh ke page print karti hai (ready HTML).
* **Client Component**: Ek editable whiteboard jahan user kuch likh ya interact kar sake (dynamic JS).

---

### 🌐 **Real-World Example:**

| Page Section | Component Type   | Why?                                 |
| ------------ | ---------------- | ------------------------------------ |
| Blog Article | Server Component | Static text hai, fast render chahiye |
| Like Button  | Client Component | User click karega, state change hogi |

---

### 🧪 **Practical Code Example:**

```tsx
// app/page.tsx (Server Component)
import LikeButton from './LikeButton'

export default function HomePage() {
  return (
    <div>
      <h1>Welcome to the Blog</h1>
      <LikeButton />
    </div>
  )
}
```

```tsx
// app/LikeButton.tsx (Client Component)
"use client"

import { useState } from 'react'

export default function LikeButton() {
  const [likes, setLikes] = useState(0)
  return (
    <button onClick={() => setLikes(likes + 1)}>
      👍 {likes}
    </button>
  )
}
```

> Is example mein `LikeButton` ko `"use client"` chahiye kyun ke `useState` aur `onClick` sirf browser mein kaam karte hain.

---

### 🏢 **Industry Good Practices:**

1. **Server Components ko default rakho** – faster page load.
2. **"use client" sirf zarurat par lagao** – warna bundle size barhta hai.
3. **UI library components (e.g. Material UI, Chakra UI)** = mostly client components.
4. **Forms, animations, stateful logic** = Client Component.
5. **Static data pages, dashboard stats** = Server Component.

---

### ✅ **Task for You:**

🔧 **Task**: Ek `app/page.tsx` banao jahan:

* Ek heading ho (Server Component).
* Ek "Click Me" button ho jo number increase kare (Client Component).
* Server aur Client components ko alag files mein rakho.

📝 Bonus: Button ko animation do (GSAP ya framer-motion se, agar installed ho).

---

Agle topic par chalein? **Step 3️⃣: Nested Layouts & Routing** ready hai jab tum kehdo.

---

### 🌱 Motivational Baat:

> **"Jo banda seekhne ke saath saath sikhata hai, woh kabhi nahi bhoolta."**
> Apna yeh Next.js roadmap kisi aur junior developer ke sath share karo – aur dekhna tum dono ka level barhta chala jaye ga.

Agle topic ke liye tayar ho?
























## ✅ Part 1: Definitions & Use Cases

### 🔵 **Server Component** (default)

**Definition:**
Next.js ka koi bhi React component **agar usme `"use client"` nahi likha** gaya ho, to wo **server component** hota hai. Yeh Node.js environment me run hota hai.

**Use Cases:**

* SEO content (blogs, products)
* Secret API access (with keys)
* Fast performance
* SSR (Server-Side Rendering)

---

### 🟠 **Client Component**

**Definition:**
Agar kisi component me aap likhte ho `"use client"`, to wo **browser me render hoga**, matlab **React hydration ke baad DOM ready hone ke baad load hota hai.**

**Use Cases:**

* Interactivity (forms, buttons, modals)
* User-specific data (like wishlist, cart)
* Dynamic UI state (`useState`, `useEffect`)

---

## 💻 Practical Example: Product List with Add to Wishlist

Hum do components banayenge:

1. **Server Component** → `ProductsList.jsx` (Product data fetch karega)
2. **Client Component** → `WishlistButton.jsx` (Product ko wishlist me add karega)

---

### 🔷 1. `ProductsList.jsx` (Server Component)

```jsx
// app/products/ProductsList.jsx
export default async function ProductsList() {
  const res = await fetch('https://fakestoreapi.com/products?limit=5');
  const products = await res.json();

  return (
    <div className="grid grid-cols-2 gap-4">
      {products.map(product => (
        <div key={product.id} className="border p-4">
          <h2 className="font-bold">{product.title}</h2>
          <p>${product.price}</p>

          {/* Pass product to client component */}
          <WishlistButton product={product} />
        </div>
      ))}
    </div>
  );
}

import WishlistButton from './WishlistButton'; // Important
```

🧠 **Yeh page:**

* Server par fetch karega
* SEO-friendly HTML generate karega
* Fast load karega

---

### 🟠 2. `WishlistButton.jsx` (Client Component)

```jsx
// app/products/WishlistButton.jsx
"use client";

import { useState } from "react";

export default function WishlistButton({ product }) {
  const [added, setAdded] = useState(false);

  const handleAdd = () => {
    // Simulate API or localStorage
    console.log("Added to wishlist:", product.title);
    setAdded(true);
  };

  return (
    <button
      onClick={handleAdd}
      className={`mt-2 px-3 py-1 rounded ${
        added ? "bg-green-500" : "bg-blue-500"
      } text-white`}
    >
      {added ? "Added ✅" : "Add to Wishlist ❤️"}
    </button>
  );
}
```

🧠 **Yeh button:**

* Browser me render hota hai
* User interaction handle karta hai
* State update karta hai (wishlist UI update)

---

## ✅ Folder Structure

```
app/
 └── products/
      ├── page.jsx              ← renders <ProductsList />
      ├── ProductsList.jsx      ← Server component
      └── WishlistButton.jsx    ← Client component
```

---

## 📌 Summary

| Feature              | Server Component      | Client Component         |
| -------------------- | --------------------- | ------------------------ |
| Where it runs        | Node.js (Server)      | Browser (Client)         |
| Interactivity        | ❌ No                  | ✅ Yes                    |
| useState / useEffect | ❌ Not allowed         | ✅ Required for state     |
| SEO                  | ✅ Yes                 | ❌ No                     |
| Data fetching        | ✅ Before render (SSR) | ✅ After render (CSR)     |
| Best use             | Blog, product list    | Buttons, modals, toggles |












frontend folder structure
src 
   components
   context
   services
   utils
   pages
   config
   hooks


backend folder structure

nodemodules
src
   controller
   middleware
   config
   routes
   models
   utils
   lib
   app.js
   index.js
package.json   


main pages

dashboard
all employees
attendance
all departmnet
payroll
job 
condidate
leaves
holiday
setting
